/**
 * We start at -1 and can +1 or +2.
 * [a, b] = arr;
 * [a, b] = [b, arr[i] + min(a,b)]
 *
 *        i
 *        v
 * [1,100,1,1,1,100,1,1,100,1]
 * a = 1, b = 100, c = 1
 * => a = 100, b = 1 + 1
 *
 *          i
 *          v
 * [1,100,1,1,1,100,1,1,100,1]
 * a = 100, b = (1 + 1), c = 1
 * => a = (1 + 1), b = (1 + 1) + 1
 *
 *            i
 *            v
 * [1,100,1,1,1,100,1,1,100,1]
 * a = (1 + 1), b = (1 + 1 + 1), c = 1
 * => a = (1 + 1 + 1), b = (1 + 1) + 1
 *
 *              i
 *              v
 * [1,100,1,1,1,100,1,1,100,1]
 * a = (1 + 1 + 1), b = (1 + 1 + 1), c = 100
 * => a = (1 + 1 + 1), b = (1 + 1 + 1) + 100
 *
 *                  i
 *                  v
 * [1,100,1,1,1,100,1,1,100,1]
 * a = (1 + 1 + 1), b = (100 + 1 + 1 + 1), c = 1
 * => a = (100 + 1 + 1 + 1), b = (1 + 1 + 1) + 1
 *
 *                    i
 *                    v
 * [1,100,1,1,1,100,1,1,100,1]
 * a = (100 + 1 + 1 + 1), b = (1 + 1 + 1 + 1), c = 1
 * => a = (1 + 1 + 1 + 1), b = (1 + 1 + 1 + 1) + 1
 *
 *                      i
 *                      v
 * [1,100,1,1,1,100,1,1,100,1]
 * a = (1 + 1 + 1 + 1), b = (1 + 1 + 1 + 1 + 1), c = 100
 * => a = (1 + 1 + 1 + 1 + 1), b = (1 + 1 + 1 + 1) + 100
 *
 *                          i
 *                          v
 * [1,100,1,1,1,100,1,1,100,1]
 * a = (1 + 1 + 1 + 1 + 1), b = (1 + 1 + 1 + 1 + 100), c = 1
 * => a = (1 + 1 + 1 + 1 + 100), b = (1 + 1 + 1 + 1 + 1) + 1
 */

/**
 * @see {@link https://leetcode.com/problems/min-cost-climbing-stairs/}
 * @param {number[]} costs
 * @return {number}
 */
export const minCostClimbingStairs = (costs) => {
  let [a, b] = costs;
  for (let i = 2; i < costs.length; i += 1) {
    [a, b] = [b, costs[i] + Math.min(a, b)];
  }
  return Math.min(a, b);
};
